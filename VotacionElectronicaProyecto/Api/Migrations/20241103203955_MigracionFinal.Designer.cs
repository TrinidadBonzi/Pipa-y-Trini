// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241103203955_MigracionFinal")]
    partial class MigracionFinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared.Entities.Candidatos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdLista")
                        .HasColumnType("int");

                    b.Property<string>("NombreCandidato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PuestoCandidato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdLista");

                    b.ToTable("Candidatos");
                });

            modelBuilder.Entity("Shared.Entities.Eleccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadListas")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DescripcionEleccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinEleccion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioEleccion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEleccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_ELECCION");

                    b.ToTable("Eleccion");
                });

            modelBuilder.Entity("Shared.Entities.EleccionLista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescripcionEleccionLista")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEleccion")
                        .HasColumnType("int");

                    b.Property<int>("IdLista")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdEleccion");

                    b.HasIndex("IdLista");

                    b.ToTable("EleccionListas");
                });

            modelBuilder.Entity("Shared.Entities.Lista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadIntegrantes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 11, 3, 17, 39, 53, 740, DateTimeKind.Local).AddTicks(7410));

                    b.Property<string>("DescripcionLista")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("EleccionId")
                        .HasColumnType("int");

                    b.Property<string>("NombreLista")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_LISTA");

                    b.ToTable("Lista");
                });

            modelBuilder.Entity("Shared.Entities.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoPersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContraseniaPersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("NombrePersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroIdentificacionPersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDocumentoPersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_PERSONA");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("Shared.Entities.PersonaEleccion", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("EleccionId")
                        .HasColumnType("int");

                    b.Property<bool>("Autorizada")
                        .HasColumnType("bit");

                    b.HasKey("PersonaId", "EleccionId");

                    b.HasIndex("EleccionId");

                    b.ToTable("PersonaElecciones");
                });

            modelBuilder.Entity("Shared.Entities.Resultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadVotos")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EleccionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_RESULTADO");

                    b.HasIndex("EleccionId");

                    b.ToTable("Resultado");
                });

            modelBuilder.Entity("Shared.Entities.Voto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EleccionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaVoto")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraVoto")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListaId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultadoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_ID_VOTO");

                    b.HasIndex("EleccionId");

                    b.HasIndex("ListaId");

                    b.HasIndex("ResultadoId");

                    b.ToTable("Voto");
                });

            modelBuilder.Entity("Shared.Entities.Candidatos", b =>
                {
                    b.HasOne("Shared.Entities.Lista", "Lista")
                        .WithMany("Candidatos")
                        .HasForeignKey("IdLista")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lista");
                });

            modelBuilder.Entity("Shared.Entities.EleccionLista", b =>
                {
                    b.HasOne("Shared.Entities.Eleccion", "Eleccion")
                        .WithMany()
                        .HasForeignKey("IdEleccion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shared.Entities.Lista", "Lista")
                        .WithMany()
                        .HasForeignKey("IdLista")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Eleccion");

                    b.Navigation("Lista");
                });

            modelBuilder.Entity("Shared.Entities.PersonaEleccion", b =>
                {
                    b.HasOne("Shared.Entities.Eleccion", "Eleccion")
                        .WithMany("PersonaElecciones")
                        .HasForeignKey("EleccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Entities.Persona", "Persona")
                        .WithMany("PersonaElecciones")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eleccion");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Shared.Entities.Resultado", b =>
                {
                    b.HasOne("Shared.Entities.Eleccion", "Eleccion")
                        .WithMany()
                        .HasForeignKey("EleccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eleccion");
                });

            modelBuilder.Entity("Shared.Entities.Voto", b =>
                {
                    b.HasOne("Shared.Entities.Eleccion", "Eleccion")
                        .WithMany("Votos")
                        .HasForeignKey("EleccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.Entities.Lista", "Lista")
                        .WithMany("Votos")
                        .HasForeignKey("ListaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Entities.Resultado", "Resultado")
                        .WithMany("Votos")
                        .HasForeignKey("ResultadoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Eleccion");

                    b.Navigation("Lista");

                    b.Navigation("Resultado");
                });

            modelBuilder.Entity("Shared.Entities.Eleccion", b =>
                {
                    b.Navigation("PersonaElecciones");

                    b.Navigation("Votos");
                });

            modelBuilder.Entity("Shared.Entities.Lista", b =>
                {
                    b.Navigation("Candidatos");

                    b.Navigation("Votos");
                });

            modelBuilder.Entity("Shared.Entities.Persona", b =>
                {
                    b.Navigation("PersonaElecciones");
                });

            modelBuilder.Entity("Shared.Entities.Resultado", b =>
                {
                    b.Navigation("Votos");
                });
#pragma warning restore 612, 618
        }
    }
}
